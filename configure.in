AC_PREREQ(2.50) dnl require version 2.5+ of autoconf

AC_INIT([phylobase], 0.2) dnl package name, version

dnl the CC and CFLAGS variables control configure tests, and they need to
dnl be the same as what will be used when the package is built. There is
dnl no need to place these flags in Makevars, and if no configure tests are
dnl done they are not needed here (see "Writing R Extensions" manual).
: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
    echo "Could not determine R home directory"
    exit 1
fi
CXX=`"${R_HOME}/bin/R" CMD config CXX`
CXXFLAGS=`"${R_HOME}/bin/R" CMD config CXXFLAGS`

AC_LANG(C++) dnl using C++

AC_REQUIRE_CPP

AC_DEFUN([AC_PROG_R], [AC_CHECK_PROG(R,R,yes)])
AC_PROG_R

## With thanks to Kurt
: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
    AC_MSG_ERROR([Could not determine R_HOME.])
fi
## look for Rscript, but use the one found via R_HOME 
## to allow for multiple installations as on CRAN
AC_DEFUN([AC_PROG_RSCRIPT], [AC_CHECK_PROG(RSCRIPT,Rscript,yes)])
AC_PROG_RSCRIPT
if test x"${RSCRIPT}" == x"yes" ; then
    ## Rcpp compile flag providing header directory containing Rcpp.h
    rcpp_cxxflags=`${R_HOME}/bin/Rscript -e 'Rcpp:::CxxFlags()'`
    ## link flag providing libary as well as path to library, and optionally rpath
    rcpp_ldflags=`${R_HOME}/bin/Rscript -e 'Rcpp:::LdFlags()'`
else
    echo "
  Your installation does not appear to have Rscript installed.
  Please make sure that you have a working and complete R installation.
"
    exit 1
fi

dnl configure include/load flags and copy sample source to inst/doc
AC_SUBST([CPPFLAGS],["${CPPFLAGS} ${rcpp_cxxflags} -Incl/ncl"])
AC_SUBST([LDFLAGS],["${LDFLAGS} ${rcpp_ldflags} -Lncl/ncl/.libs -lncl"])

#echo "Building libRcpp.a in RcppSrc..."
#cd src/RcppSrc
#make RHOME=${R_HOME}
#cd ../..

echo "Building libncl.a in ncl..."
cd src/ncl
./configure
make
cd ../..

if test \! -d inst
then
    mkdir inst
fi

AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_OUTPUT(src/Makevars)
