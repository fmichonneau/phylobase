FOR VERSION 0.3
=======================================================
* Check in general for completeness (i.e. replacement functions), obvious bugs
* Plotting: see below
* Data classes: see below
* multiPhylo: see below
* Documentation: see below
* data class: check and incorporate into phylo4d FIXME: what do we mean here?
* incorporate ioNCL

## Plotting
### phylo4d objects
  * verify that identify works with this version -- [yes] TJ
  * error in plotting a subsetted tree: see tests/plottest.R -- [fixed] TJ.
  * modify phylo4 method to allow "Singles" (plot.phylo doesn't)? What are 'singles'? One single descendent for a node?
  * plotting with data and `show.node.label` scrambles order of node labels *this is really a problem with ade4 vs ape ordering of nodes* -- [fixed since we no longer use ade4 for plotting] TJ
  * multiPhylo4x plotting
  * plot the tree when no data are stored in a phylo4d instead of throwing an error

## Data classes
### Tree model:
* assigning edge and node labels -- is there/should there be an option to turn this off?  assign empty ("") labels? how about assigning the node number if there are no user-supplied labels?(mb)
* should default node labels start at N(nTips+1), to match internal node numbers?
* should coercing phylo4d to phylo4 give a warning message about losing data?   Should phylo4d to phylo4?  Yes(mb)
* order: All phylo4 edge matrices are internally stored as "cladewise"/Newick traversal order.  Extend edges accessor method with optional argument that allows edges to be extracted in a different order (possibly with an attribute as in ape); need to steal 'reorder' from ape, extend for phylo4d keeping track of traits also see ape::ladderize
* root node data characteristics (compare what OUCH does): root node doesn't have corresponding entry in the edge matrix:  ouch adds a row to the edge matrix (1-row data frame matching node column info). Not entirely clear how we should deal with this, MB has a proposal.
* Data model: There seems to be consensus that the data model should be at least a little bit richer than a straight data frame, that we should create a new data class.  There's a draft standard in pdata.R in the current package.  
    * "Basic" metadata (slot 'type' in the data class) is implemented as a factor with allowed levels ("multitype", "binary", "continuous", "DNA", "RNA", "aacid", "other", "unknown"). There's an argument for sticking with the NEXUS types exactly, and one for extending them.  
    * "Extended" metadata (slot 'metadata' in the data class) is implemented as an arbitrary list.  
    * There are two camps over how molecular data should be incorporated.  1) Do we want two slots -- one for molecular and one for non-molecular -- or 2) do we want to stick the molecular data (especially long alignments) in a data frame as (e.g.) a character?  
        1. Doing it the first way makes it hard to do subsetting operations transparently.  
        2. Doing it the second way makes handling genetic data harder (and wastes space etc.). It is possible to have a "raw" vector within a data frame (which is the base type for "DNAbin" objects in ape), but we can't have a DNAbin object itself.  We could either convert to/from DNAbin as we accessed slots from the data frame (ugh), or we could try to write the rich data frame.  
        3. **If we design the accessor functions really well, and people use them rather than digging into the guts, we can change things later.**  Do the people at the [R Genetics project](http://rgenetics.org/) have any ideas about this?  
    * do we want to allow an accessor method to do the equivalent of `tdata(object)[i,j] <- value` ? or should people mess with their data before they attach it to the tree? (is this harder once the data are packed inside an additional layer of structure?)

### multiPhylo
* extend classes: should we have both multiPhylo4 (no data) and multiPhylo4d (with data) [DONE]
* Implement multiphylo tree names? [DONE]
* need multiPhylo! "unpack"/"pack" methods (convert multiPhylo4x to list of phylo4x, convert list of phylo4x to multiPhylo4x)
* `ctree()` method
* Still need many basic methods
* `show()`, `summary()`, `plot()` methods can mimic `ape`'s new `multiphylo` class, though multiPhylo4d will need to match what we do for phylo4d

### Documentation
* Complete full example in vignette
* Does S4-style help access really work? FIXME: Be more specific. ?as(mytree,"phylo4) does not work. It is not clear how users will find the coercion methods page. methods?coerce brings up phylobase page, but this is pretty cryptic... At least we have linked coerce-methods page to the phylo4, phylo4d pages.
* is the phylo4 constructor actually documented anywhere?  YES phylo4.Rd added.
* phylo4 constructor should have its own method manpage (currently is inside the class doc)  FIXED (we think)

FOR VERSION 0.4
=======================================================
### Options
* phylo.compat: default=TRUE, allows accessing internal phylo4 elements with $ and $<- FIXME: Is this different than the current implementation? 
* check.data defaults FIXME: what does this mean?
* cf implementations in other packages (e.g. bbmle) FIXME: what does "cf" and "bbmle" mean?
   
### Rooting
* implement re-rooting
* check with Sidlauskas: is there an "infelicity" in the way ape does it that we should modify? FIXME: what feature/aspect are we talking about here?

### Tree walking/generic manipulation methods
* Decide on a coherent numbers/names policy
* General practice: how much should we work with/return internal node numbers, and how much node names/tags?  Current methods are a mishmash
* Can all of these can be done with phylobase:
    * compare: with Mesquite, ape (check O'Meara list), and Sidlauskas [wiki page](https://www.nescent.org/wg_phyloinformatics/R_Hackathon/DataTreeManipulation)
    * geiger: prune.extinct.taxa, prune.random.taxa
    * allDescend to give internal nodes as well as tips?
    * Movement along branches, traversal, etc.: what operations are needed?
    * allDescend gets tips only -- option to get list including internal nodes?
    * time slices: prune back by time ?

### Documentation
* work through Sidlauskas wiki page

FUTURE DISCUSSIONS
==================
## Terminology
### Some things to think about (re)naming:
* tree walking: `getDescend`, `getAncest`, `allDescend`, `allAncest` -- sons and fathers, daughters and mothers, tips/leaves, ?
* should `check_data` be `check_phylo4d` for consistency with `check_phylo4` (or should `check_phylo4` be `check_tree`?)
* EdgeLength/BranchLength?
* root, Root, rootNode, RootNode?
* `subset(phy,node.subtree= )` == `subset(phy,subtree= )` ?

## Plotting
* other ways of plotting tree+data?  isoMDS + color space?
* ggplot2 extension?  grid version?
* look for nice examples of ways people have plotted trees+data

## multiPhylo
* Eventually may want to use something like the [trackObjs package](http://wiki.r-project.org/rwiki/doku.php?id=packages:cran:trackobjs) if we have lots and lots of trees
* Do we want to write some kind of `apply()` function for these? Or, alternatively, just provide documentation for how you would use [ls]apply on a multiPhylo object e.g., `sapply(object@phylolist,fn,data=tdata(object),...)`


## Data checking
* should `check_phylo4` check for cyclicity, or is this overkill?
* what other checks should there be on a phylo4 tree?  right now we check for (1) right number of edge lengths (if >0), (2) right number of tip labels, (3) at most one root, (4) only one ancestor per node.  NEED: (a) check for broken tree (= disconnected edge), (b) root != Ntips+1, (c) tip numbers > root number, etc. Necessary because we are allowing creation of trees "by hand" using the phylo4 constructor. 
* information returned by `check_data` isn't quite the same format as geiger's matching function. Clear enough?
* should there be an option for pruning tree to data? does this already exist?  THIS would be great
* option for fuzzy matching with `agrep()`?
    * ("fuzzywarn" for fuzzy matching with warning,
* extend label-matching code to node labels

## Discuss
* Rewrite methods in native phylo4 as necessary/desirable [????]
    * Code from ape often calls some C code... so I would leave what calls ape as much as possible (T.J.)
    * It would be nice to reduce the dependency on particular node numbers, so long as they are unique (i.e. root = Ntips+1, etc). We can validate for ape compatibility with check_data, but it would be nice to have phylobase code not be hard-coded with this dependence. (mb)
* Figure out best way to deal with namespace/conflicts (overriding ape methods)
   * synch with newest ape release:
      * is `multi.tree` now `multiPhylo`?
* implement NAMESPACE??
* TreeLib wrapper?
* more tree manipulation methods
* lapply/multiple-tree methods, or at least documentation on how to do it
* compare Sidlauskas wiki documentation, how would one do it in phylo4?
* synch with `ape` on name conflicts, multi.tree/multiPhylo


## Testing
* end users need to start reading documentation, testing ...

