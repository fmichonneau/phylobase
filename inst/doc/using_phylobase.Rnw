\documentclass{article}
%\VignettePackage{phylo4}
% \VignetteIndexEntry{Using the phylobase package}
\usepackage{graphicx}
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}

\usepackage{color}

\usepackage[utf8]{inputenc} % for UTF-8/single quotes from sQuote()
\newcommand{\code}[1]{{{\tt #1}}}
\title{The \code{phylo4} S4 classes and methods}
\author{Ben Bolker}
\date{\today}
\begin{document}
\maketitle
\tableofcontents

\section{Introduction}

This document is supposed to be a more basic/beginner-oriented
introduction to using the \code{phylobase} package 
(which contains the \code{phylo4} classes and other
supporting methods) to read and plot basic information
about phylogenetic trees and associated data.

\section{Trees without data}

You can start with a tree --- an object of
class \code{phylo} from the \code{ape} package
(e.g., read in using the \code{read.tree()} or \code{read.nexus()}
functions), and convert it to a \code{phylo4} object.

For example, get the \emph{Geospiza} data from the \code{geiger} package:
<<>>=
library(geiger)
data(geospiza)
names(geospiza)
@ 

Convert the tree to a \code{phylo4} object:
<<>>=
library(phylobase)
g1 <- as(geospiza$geospiza.tree,"phylo4")
g1
@ 

\code{summary} gives a little extra information,
including information on branch lengths:
<<>>=
summary(g1)
@ 

Print tip labels:
<<>>=
labels(g1)
@ 

Print internal node labels (R automatically assigns values):
<<>>=
NodeLabels(g1)
@ 

Print edge labels (also automatically assigned):
<<>>=
EdgeLabels(g1)
@ 

Is it rooted?
<<>>=
isRooted(g1)
@

Which node is the root?
<<>>=
rootNode(g1)
@ 

Does it have any polytomies?
<<>>=
hasPoly(g1)
@ 

Does it have branch lengths?
<<>>=
hasEdgeLength(g1)
@ 

You can modify labels and other aspects
of the tree --- for example,
<<>>=
labels(g1) <- tolower(labels(g1))
@ 

You can use \code{plot(g1)} to plot the tree (at this
point, this just calls the \code{plot.phylo} command from
the \code{ape} package).

\textbf{Q: what else do people want to do to check
their trees?}

\section{Trees with data}

The \code{phylo4d} class matches trees with data.
(\textbf{fixme: need to be able to use ioNCL!})
or combine it with a data frame to make a \code{phylo4d} (tree-with-data)
object.

Now we'll take the \emph{Geospiza} data from \verb+geospiza$geospiza.data+
and merge it with the tree.  However, since \emph{G. olivacea} is included
in the tree but not in the data set, we will initially run into some trouble:

<<eval=FALSE>>=
g2 <- phylo4d(g1,geospiza$geospiza.data)
@ 

gives
<<echo=FALSE>>=
err1 <- try(g2 <- phylo4d(g1,geospiza$geospiza.data),silent=TRUE)
cat(as.character(err1))
@ 

We have two problems --- the first is that we forgot to lowercase
the labels on the data to match the tip labels:

<<>>=
gdata <- geospiza$geospiza.data
row.names(gdata) <- tolower(row.names(gdata))
@ 

To deal with the second problem
(missing data for \emph{G. olivacea}), we have a few choices.
The easiest is to use \code{missing.tip.data="OK"}
to allow R to create the new object:
<<>>=
g2 <- phylo4d(g1,gdata,missing.tip.data="OK")
@ 
(setting \code{missing.tip.data} to \code{"warn"}
would create the new object but print a warning).

Another way to deal with this would be to 
use \code{prune()} to drop
the offending tip from the tree first:
<<results=hide>>=
g1B <- prune(g1,"olivacea")
phylo4d(g1B,gdata)
@ 

You can summarize the new object:
<<>>=
summary(g2)
@ 

Or use \code{tdata()} to extract the
data (i.e., \code{tdata(g2)}).
By default, \code{tdata()} will retrieve
tip data, but you can also get internal
node data only (\code{tdata(tree,"node")})
or --- if the tip and node data have the
same format --- all the data combined
(\code{tdata(tree,"allnode")}).

Plotting calls \code{plot.phylog} from the \code{ade4} package.

\section{Subsetting}

The \code{subset} command offers a variety of ways
of extracting portions of a \code{phylo4} or \code{phylo4d}
tree, keeping any tip/node data consistent.

\begin{description}
\item[tips.include]{give a vector of tips (names or numbers) to retain}
\item[tips.exclude]{give a vector of tips (names or numbers) to drop}
\item[mrca]{give a vector of node or tip names or numbers; extract the clade containing these taxa}
\item[node.subtree]{give a node (name or number); extract the subtree starting from this node}
\end{description}

Different ways to extract the \emph{fuliginosa}-\emph{scandens}
clade:
<<results=hide>>=
subset(g2,tips.include=c("fuliginosa","fortis","magnirostris",
            "conirostris","scandens"))
subset(g2,node.subtree="N06")
subset(g2,mrca=c("scandens","fortis"))
@ 

One could drop the clade by  doing
<<results=hide>>=
subset(g2,tips.exclude=c("fuliginosa","fortis","magnirostris",
            "conirostris","scandens"))
subset(g2,tips.exclude=allDescend(g2,MRCA(g2,c("difficilis","fortis"))))
@ 

\section{multiPhylo classes}
\end{document}
